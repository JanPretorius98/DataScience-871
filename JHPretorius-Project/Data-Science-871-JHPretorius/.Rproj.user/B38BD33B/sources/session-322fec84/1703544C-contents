rm(list = ls()) # Clean environment

# Load necessary packages
library(tidyverse)
library(tidytext)
library(readxl)
library(writexl)
library(readr)
library(stringr)
library(lubridate)
library(glue)
library(stringdist)

# Set the working directory to the folder containing the raw data
path <- "/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/Masters-2023/Research Papers/Death Certificates/Raw Data"
setwd(path)

# Load Data
raw_df <- read_xlsx("aggregate.xlsx")

# Process Data
raw_df <- raw_df %>%
  mutate(ID = paste(Year, `Image Number`, sep = "_")) %>%
  distinct(ID, .keep_all = TRUE) %>%
  mutate(across(everything(), ~str_squish(.)))

# Cleaning starts ----
# Clean age ----
# words <- raw_df %>%
#   select(`Age`) %>%
#   unnest_tokens(word, `Age`) %>% 
#   mutate(word = gsub('[[:digit:]]+', '', word)) %>%
#   count(word, sort = T)

Age <- raw_df %>%
  select(ID, Age) %>%
  mutate(Age = tolower(Age)) %>% 
  mutate(Age = trimws(Age),
         # before we get rid of punctuation
         Age = str_replace(string = Age, pattern = "1/2", replacement = ".5"),
         Age = gsub('[[:punct:] ]+',' ',Age))

Age <- Age %>%
  mutate(Age = str_replace(string = Age, pattern = "about", replacement = "")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "abt", replacement = "")) %>% 
  mutate(Age = str_replace(string = Age, pattern = " an ", replacement = "")) %>% 
  mutate(Age = str_replace_all(string = Age, pattern = "and", replacement = "")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "jaar", replacement = "years")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "jaren", replacement = "years")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "approx", replacement = "")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "maanden", replacement = "months")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "maande", replacement = "months")) %>%     
  mutate(Age = str_replace(string = Age, pattern = "omtrent", replacement = "")) %>%     
  mutate(Age = str_replace(string = Age, pattern = "omtrent", replacement = "")) %>%
  mutate(Age = str_replace(string = Age, pattern = "bijna", replacement = "")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "amtrent", replacement = "")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "dagen", replacement = "days")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "yr", replacement = "years")) %>%
  mutate(Age = str_replace(string = Age, pattern = "blank", replacement = "")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "unknown", replacement = "")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "half", replacement = ".5")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "old", replacement = "")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "few", replacement = "5")) %>%
  mutate(Age = str_replace(string = Age, pattern = "jaaren", replacement = "years")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "jare", replacement = "years")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "maand", replacement = "months")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "maanden", replacement = "months")) %>%
  mutate(Age = str_replace(string = Age, pattern = "maand", replacement = "months")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "onbekend", replacement = "")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "tears", replacement = "years")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "eyars", replacement = "years")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "dae", replacement = "days")) %>%
  mutate(Age = str_replace(string = Age, pattern = "enige", replacement = "one")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "yeara", replacement = "years")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "yeas", replacement = "years")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "almost", replacement = "")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "estimated", replacement = "")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "omtren", replacement = "")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "probably", replacement = "")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "reputed", replacement = "")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "yeaers", replacement = "years")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "yaar", replacement = "years")) %>%
  mutate(Age = str_replace(string = Age, pattern = "yeares", replacement = "years")) %>%
  mutate(Age = str_replace(string = Age, pattern = "yers", replacement = "years")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "yrs", replacement = "years")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "yearsen", replacement = "years")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "one", replacement = "1")) %>%
  mutate(Age = str_replace(string = Age, pattern = "montha", replacement = "months")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "ma", replacement = "months"))  

# Next we deal with the numbers
Age <- Age %>%
  mutate(Age = str_replace(string = Age, pattern = "twenty", replacement = "20")) %>%
  mutate(Age = str_replace(string = Age, pattern = "thirty", replacement = "30")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "forty", replacement = "40")) %>%     
  mutate(Age = str_replace(string = Age, pattern = "fifty", replacement = "50")) %>%     
  mutate(Age = str_replace(string = Age, pattern = "sixty", replacement = "60")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "seventy", replacement = "70")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "eighty", replacement = "80")) %>%
  mutate(Age = str_replace(string = Age, pattern = "ninety", replacement = "90")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "one", replacement = "1")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "two", replacement = "2")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "three", replacement = "3")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "four", replacement = "4")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "five", replacement = "5")) %>% 
  mutate(Age = str_replace(string = Age, pattern = "six", replacement = "6")) %>%   
  mutate(Age = str_replace(string = Age, pattern = "seven", replacement = "7")) %>%     
  mutate(Age = str_replace(string = Age, pattern = "eight", replacement = "8")) %>%     
  mutate(Age = str_replace(string = Age, pattern = "nine", replacement = "9")) %>%  
  mutate(Age = str_replace(string = Age, pattern = "ten", replacement = "10"))

# Digits
Age <- Age %>%
  mutate(Age = str_replace(string = Age, pattern = "½", replacement = ".5")) %>%
  mutate(Age = str_replace(string = Age, pattern = "¼", replacement = ".25"),
         Age = str_squish(Age))

Age <- Age %>% 
  mutate(Age = ifelse(!str_detect(Age, "[a-z]"), str_c(Age, "years", sep = " "), Age))

Age <- Age %>% 
  mutate(age_days = round(as.numeric(as.period(Age), "days"), 0),
         age_years = round(as.numeric(as.period(Age), "years"), 2))

# clean date of death ----
# Check which unique words appear
# words <- date_death %>%
#   select(`Day Of Death`) %>%
#   unnest_tokens(word, `Day Of Death`) %>% 
#   mutate(word = gsub('[[:digit:]]+', '', word)) %>%
#   count(word, sort = T)

date_death <- raw_df %>%
  select(Year, ID, `Day Of Death`, `Month Of Death`, `Year Of Death`) %>%
  mutate(`Day Of Death` = tolower(`Day Of Death`)) %>%
  mutate(`Month Of Death` = tolower(`Month Of Death`)) %>%
  mutate(`Year Of Death` = tolower(`Year Of Death`))

date_death <- date_death %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "abt", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "about", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "unknown", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "pm", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "ago", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "beginning", replacement = "1")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "about", replacement = "")) %>% 
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "fortnight", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "nov", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "months", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "month", replacement = "")) %>% 
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "am", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "and", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "at", replacement = "")) %>% 
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "betw", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "cancelled", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "from", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "known", replacement = "")) %>% 
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "noon", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "not", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "of", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "sunday", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "uncertain", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "week", replacement = "")) %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "midnight", replacement = ""))
  
  
date_death <- date_death %>%
  mutate(`Day Of Death` = str_replace(string = `Day Of Death`, pattern = "about", replacement = ""),
         `Day Of Death` = parse_number(`Day Of Death`))

words <- date_death %>% 
  select(`Month Of Death`) %>% 
  unnest_tokens(word, `Month Of Death`) %>% 
  mutate(word = gsub('[[:digit:]]+', '', word)) %>% 
  count(word, sort = T)

date_death <- date_death %>%
  mutate(`Month Of Death` = str_replace(string = `Month Of Death`, pattern = "unknown", replacement = ""),
         `Month Of Death` = str_replace(string = `Month Of Death`, pattern = "cancelled", replacement = ""),
         `Month Of Death` = str_replace(string = `Month Of Death`, pattern = "known", replacement = ""),
         `Month Of Death` = str_replace(string = `Month Of Death`, pattern = "not", replacement = ""),
         `Month Of Death` = str_replace(string = `Month Of Death`, pattern = "prob", replacement = ""))

# words <- date_death %>% 
#   select(`Year Of Death`) %>% 
#   unnest_tokens(word, `Year Of Death`) %>% 
#   mutate(word = gsub('[[:digit:]]+', '', word)) %>% 
#   count(word, sort = T)

date_death <- date_death %>%
  mutate(`Year Of Death` = str_replace(string = `Year Of Death`, pattern = "paarl", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "wellington", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "cancelled", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "groenfontein", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "jubilee", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "klein", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "known", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "main", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "mietjie", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "not", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "parys", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "station", replacement = ""),
         `Year Of Death` = str_replace(string = `Year Of Death`, pattern = "street", replacement = ""))

date_death <- date_death %>%
  mutate(`Year Of Death` = if_else(`Year Of Death` > 1931 | `Year Of Death` < 1895, Year, `Year Of Death`))

date_death <- date_death %>%
  mutate(`Year Of Death` = parse_number(`Year Of Death`))


date_death <- date_death %>%
  mutate(death_date = glue("{`Day Of Death`} - {`Month Of Death`} - {`Year Of Death`}"),
         death_date = dmy(death_date))

# Clean Duration Last Illness ----
# first we convert the text to lower case, trim the whitespace and remove the punctiation
doli <- raw_df %>%
  select(ID,`Duration Last Illness`) %>% 
  mutate(`Duration Last Illness` = trimws(`Duration Last Illness`),
         # before we get rid of punctuation
         `Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "1/2", replacement = ".5"),
         `Duration Last Illness` = gsub('[[:punct:] ]+',' ',`Duration Last Illness`))

doli <- doli %>% 
  mutate(`Duration Last Illness` = tolower(`Duration Last Illness`))

# words <- doli %>% 
#   select(`Duration Last Illness`) %>% 
#   unnest_tokens(word, `Duration Last Illness`) %>% 
#   mutate(word = gsub('[[:digit:]]+', '', word)) %>% 
#   count(word, sort = T)

# removing and replacing mistakes in transcription
doli <- doli %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "one", replacement = "1")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "sudden", replacement = "5 hours")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "blank", replacement = "")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "none", replacement = "")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "several", replacement = "5")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "dagen", replacement = "days")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "some", replacement = "5")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "abt", replacement = "")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "unknown", replacement = "")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "indefinite", replacement = "")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "few", replacement = "5")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "suddenly", replacement = "5 hours")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "maanden", replacement = "months")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "omtrent", replacement = "")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "approx", replacement = "")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "enige", replacement = "1")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "weken", replacement = "weeks"))  %>% 
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "weken", replacement = "weeks")) %>%  
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "dae", replacement = "days")) %>% 
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "maande", replacement = "months")) %>%   
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "fortnight", replacement = "2 weeks")) %>% 
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "maand", replacement = "months")) %>%   
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "instantaneous", replacement = "5 hours")) %>%   
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "dag", replacement = "day")) %>%   
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "nil	", replacement = "")) %>%   
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "half", replacement = ".5")) %>%   
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "immediately", replacement = "5 hours")) %>%   
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "three", replacement = "3")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "two", replacement = "2")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "jaar", replacement = "years")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "night", replacement = "day")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "uur", replacement = "year")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "circa", replacement = "")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "een", replacement = "1")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "four", replacement = "4")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "acht", replacement = "8")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "atb", replacement = "")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "couple", replacement = "5")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "dage", replacement = "days")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "jare", replacement = "years")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "jare", replacement = "years")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "jaren", replacement = "years")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "monts", replacement = "months")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "twenty", replacement = "20")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "uncertain", replacement = "")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "moths", replacement = "months")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "probably", replacement = "")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "about", replacement = ""))%>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "montha", replacement = "months"))

# digits
doli <- doli %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "½", replacement = ".5")) %>%
  mutate(`Duration Last Illness` = str_replace(string = `Duration Last Illness`, pattern = "¼", replacement = ".25"))

# we mutate age to be a uniform format, creating age in days and in years
doli <- doli %>% 
  mutate(DOLI_days = round(as.numeric(as.period(`Duration Last Illness`), "days"), 0),
         DOLI_years = round(as.numeric(as.period(`Duration Last Illness`), "years"), 2))

# Let's add the dfs together
master_df <- Age %>%
  inner_join(date_death, by = "ID") %>%
  inner_join(doli, by = "ID")

# this changes all DOLI for babies who've had illness since birth to their age at death.
master_df <- master_df %>% 
  mutate(DOLI_days = ifelse(str_detect(`Duration Last Illness`, pattern = "birth"), age_days, DOLI_days),
         DOLI_years = ifelse(str_detect(`Duration Last Illness`, pattern = "birth"), age_years, DOLI_years))

# Clean gender ----
# words <- Sex %>% 
#   select(Sex) %>% 
#   unnest_tokens(word, Sex) %>% 
#   mutate(word = gsub('[[:digit:]]+', '', word)) %>% 
#   count(word, sort = T)

Sex <- raw_df %>%
  select(ID, Sex) %>%
  mutate(Sex = tolower(trimws(Sex))) %>%
  mutate(Sex = gsub('[[:punct:]]', '', Sex)) %>%
  mutate(Sex = str_replace_all(Sex, regex("mann(?:e|el)?lik(?:e)?|mal(?:e|ik)|man(?:n)?e(?:l|t)?(?:y|ie|ke)?", ignore_case = TRUE), "male")) %>%
  mutate(Sex = str_replace_all(Sex, regex("vrouw(?:e)?l(?:yk|ik|ijke)|fem(?:ae|ala|e)|griet", ignore_case = TRUE), "female")) %>%
  mutate(Sex = str_replace_all(Sex, regex("cancelled|mixed|prob", ignore_case = TRUE), "")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "vrouwelijk", replacement = "female")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "vrouw", replacement = "female")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "vroulik", replacement = "female")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "vrouelik", replacement = "female")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "vrouwelijk", replacement = "female")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "vrou", replacement = "female")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "manlik", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "man", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "maleklik", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "maleke", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "malek", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "malejie", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "maleik", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "maleijk", replacement = "male")) %>% 
  mutate(Sex = str_replace(string = Sex, pattern = "mennelyk", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "masculine", replacement = "male")) %>%
  mutate(Sex = str_replace(string = Sex, pattern = "malelyke", replacement = "male")) %>% 
  mutate(Sex = str_squish(Sex))
  
master_df <- master_df %>%
  inner_join(Sex, by = "ID")

# Clean doctor signature ----
Doc <- raw_df %>%
  select(ID, `Medical Man'S Name`) %>%
  mutate(`Medical Man'S Name` = gsub('[[:punct:]]', '', `Medical Man'S Name`)) %>%
  mutate(`Medical Man'S Name` = tolower(`Medical Man'S Name`)) %>% 
  rename(`Med Man Name` = `Medical Man'S Name`)
  
doc_sign <- "geen|no|none|absent|postmortem|not|post|view|viewed"

no_doc <- function(med_man) {
  if (grepl(doc_sign, med_man)) {
    return(NA)
  } else {
    return(med_man)
  }
}

Doc <- Doc %>%
  mutate(`Med Man Name` = sapply(`Med Man Name`, no_doc))

words <- Doc %>% 
    select(`Med Man Name`) %>%
    unnest_tokens(word, `Med Man Name`) %>%
    mutate(word = gsub('[[:digit:]]+', '', word)) %>%
    count(word, sort = T)

master_df <- master_df %>%
  inner_join(Doc, by = "ID")

# Clean Cause of Death ----
#Note: `Causes Of Death` = Cause of Death column
cod <- raw_df %>%
  select(ID, `Causes Of Death`) %>% 
  mutate(`Causes Of Death` = gsub('[[:punct:]]', '', `Causes Of Death`)) %>%
  rename(`CoD` = `Causes Of Death`) %>% 
  mutate(CoD = tolower(CoD))

# words <- cod %>% 
#   select(CoD) %>% 
#   unnest_tokens(word, CoD) %>% 
#   mutate(word = gsub('[[:digit:]]+', '', word)) %>% 
#   count(word, sort = T)

# Disease classification keywords
disease_classifications <- list(
  resp = c("pneumonia", "lungs", "lung", "bronchitis", "pulmonary", "broncho", "cough", "influenza",
           "pertussis", "emphysema", "emphyzema", "long", "phtithis", "flu", "croup", "griep", "diphteria", "bronchopneumonia",
           "spanish", "pleuropneumonia", "bronchitus", "brinchitis", "phtisis", "kinkhoes", "hoes", "pnemonia", "asthma", "tuberbulosis",
           "measles", "measels", "pneumonie", "inflyenza", "spaanse", "griep", "asthma", "borst", "chest"),
  gastro = c("enteric", "diarrhoea", "gastritis", "bowels", "bowel", "maagkoors", "cholera", "gastro", "vomiting", "gastroenteritis", 
             "typhoid", "intestinal", "maag", "peritonitis", "enterocolitis", "appendicitis", "stomach", "enteritis", "entiritis",
             "dysentery", "diarrhea", "phthisis","gastritis", "intestines", "vomiting", "bladder", "gastr", "diptheria", "maagkoors",
             "dysentry", "diarhoea", "diphtheria", "diarrhpea", "thypoid", "disenterie", "diarre", "diarrhoe", "indigestion", "diahroea", "diarroea", "entero"),
  cardio = c("heart", "cardiovascular", "cardiac", "carditis", "myocarditis", "dropsy", "cardia", "arterio", "arterial", "capillary",
             "cordis", "arteriosclerosis", "angina", "ventriculi", "hart", "hartverlamming", "apoplexy", "stroke", "beroerte", "aortic",
             "apoplestic", "aneurism", "anuerism", "aorta", "thrombosis", "apoplectic"),
  birth = c("premature", "birth", "geboorte", "gebore", "prematurity", "congenital", "womb", "apoplexia", "uterus","baarmoeder", "born", 
            "umbilcus", "congental"),
  cancer = c("cancer", "carcinoma", "kanker", "cancerous", "sarcoma", "growth", "tumour", "tumor", "leukaemia", "carcenoma"),
  convulsions = c("convulsions", "convulsion", "teething", "stuipen", "stuipe"),
  sti = c("syphylis", "hepatitis", "gonorhoea", "syphilis"),
  tb = c("tuberculosis", "tubercular", "tubercle", "consumption", "comsumption", "tering", "consumpsion", "comsunption")
)

# Process the data frame
cod <- cod %>%
  mutate(CoD = tolower(CoD),
         cod_class = str_c(
           if_else(str_detect(CoD, paste(disease_classifications$resp, collapse = "|")), "resp;", ""),
           if_else(str_detect(CoD, paste(disease_classifications$gastro, collapse = "|")), "gastro;", ""),
           if_else(str_detect(CoD, paste(disease_classifications$cardio, collapse = "|")), "cardio;", ""),
           if_else(str_detect(CoD, paste(disease_classifications$birth, collapse = "|")), "birth;", ""),
           if_else(str_detect(CoD, paste(disease_classifications$cancer, collapse = "|")), "cancer;", ""),
           if_else(str_detect(CoD, paste(disease_classifications$convulsions, collapse = "|")), "convulsions;", ""),
           if_else(str_detect(CoD, paste(disease_classifications$sti, collapse = "|")), "sti;", ""),
           if_else(str_detect(CoD, paste(disease_classifications$tb, collapse = "|")), "tb;", "")
         ),
         cod_class = sub(";+$", "", cod_class)) # Remove trailing semicolons

# Function to handle 'convulsions' cause of death
handle_convulsions <- function(cod) {
  cod_list <- unlist(strsplit(cod, ";"))
  if (length(cod_list) > 1 && "convulsions" %in% cod_list) {
    cod_list <- cod_list[cod_list != "convulsions"]
    return(paste(cod_list, collapse = ";"))
  } else {
    return(cod)
  }
}

# Adjust cod_class according to the new criteria
cod <- cod %>%
  mutate(cod_class = sapply(cod_class, handle_convulsions))

# Remove leading and trailing semicolons
cod$cod_class <- gsub("^;|;$", "", cod$cod_class)

# If an individual died from convulsions shortly after being born, list CoD as birth
age_df <- master_df %>% 
  select(ID, age_days)

cod <- cod %>% 
  inner_join(age_df, by = "ID")

cod <- cod %>%
  mutate(cod_class = ifelse(age_days < 30 & cod_class == "convulsions", "birth", cod_class)) %>% 
  select(-c(age_days))


master_df <- master_df %>%
  inner_join(cod, by = "ID")

# Clean occupation ----
occu <- raw_df %>% 
  select(c(ID, `Occupation`, `Occupation Of Father`, `Occupation Of Mother`)) %>% 
  rename(Occupation_Father = `Occupation Of Father`) %>% 
  rename(Occupation_Mother = `Occupation Of Mother`) %>% 
  mutate(Occupation = tolower(Occupation)) %>% 
  mutate(Occupation_Father = tolower(Occupation_Father)) %>% 
  mutate(Occupation_Mother = tolower(Occupation_Mother)) %>% 
  mutate(Occupation = gsub('[[:punct:]]', '', Occupation)) %>%
  mutate(Occupation_Father = gsub('[[:punct:]]', '', Occupation_Father)) %>%
  mutate(Occupation_Mother = gsub('[[:punct:]]', '', Occupation_Mother))

# Define the regular expressions for each category
farming <- "farm-worker|peasant|agriculturalist|shepherd|farm worker|herd|gardener|groom|wood cutter|stable boy|cowherd|cattleman|plaas|farm"
production <- "upholsterer|sawyer|smith|seamstress|stonecutter|stone cutter|tinsmith|smith|taylor|tanner|tailor|working|woodcutter|carrier|wookcutter|woodsawer|miller|labourer|manufacturer|mason|painter|factory|carpenter|blacksmith|shoemaker|driver|wagon|arbeider|maker|boot|builder|building|painter|railway"
prof_and_man <- "schoolmaster|missionary|speculator|student|farmer|scholar|teacher|clerk|manager|ganger|overseer|engineer|nurse|minister|doctor|attorney|law|legal|bookkeeper|accountant|biddle|dental|police|wynboer"
sales_and_service <- "wash|hairdresser|trader|jeweller|shopkeeper|washwoman|dealer|merchant|housewife|domestic servant|servant|washing work|cook|baker|housekeeper|washer woman|general dealer|maid|house|domestic|washer|home|huishoudster|fireman"
pensioners <- "pensioner|pension|retired"

classify_occupation <- function(occupation) {
  if (grepl(farming, occupation)) {
    return("Farming")
  } else if (grepl(production, occupation)) {
    return("Production")
  } else if (grepl(prof_and_man, occupation)) {
    return("Professionals & Managers")
  } else if (grepl(sales_and_service, occupation)) {
    return("Sales & Service")
  } else if (grepl(pensioners, occupation)) {
    return("Pensioners")
  } else {
    return(NA)
  }
}

occu <- occu %>%
  mutate(Occupation = sapply(Occupation, classify_occupation),
         Occupation_Father = sapply(Occupation_Father, classify_occupation),
         Occupation_Mother = sapply(Occupation_Mother, classify_occupation))

master_df <- master_df %>% 
  inner_join(occu, by = "ID")

master_df <- master_df %>%
  mutate(Occupation = ifelse(is.na(Occupation) & age_years < 13, "Children", Occupation))

# Clean race ----
# Categorise races
White <- "blank|european|white|jewish|england|german|american|british|dutch|greek|germany|holland|ireland|portuguese|asyrian|english|europe|europen|europruanoch|duitser"
Coloured <- "bushman|mixed|hottentot|gemengd|malay|gekleurd|cape|coloured|colony|miced|gemengde|mahomedan|col|coured|gekleur|gemend|gemeng|gemengs|gemnegd|ing|kaap|kleur|maalay|mahoureden|makateen|makatese|makketees|matalee|mized|moslem|bastard"
Black <- "negro|boesman|kaffir|kafir|basuto|xhosa|fingo|native|bechuana|tembu|mozambique|zulu|kaffer|gaika|tamboekie|pondo|xosa|kaffie|baca|bantu|basoeto|betchuana|damara|damarah|griqua|kaal|kafer|kaffier|kaffoer|morolo|mosambique|pondomiese|red|rooi|tambuki|temba|tembo|touwsrivier|tribe|zosa|boy"

classify_race <- function(race) {
  if (grepl(White, race, ignore.case = TRUE)) {
    return("White")
  } else if (grepl(Coloured, race, ignore.case = TRUE)) {
    return("Coloured")
  } else if (grepl(Black, race, ignore.case = TRUE)) {
    return("Black")
  } else {
    return(NA)
  }
}

race <- raw_df %>%
  select(ID, Race) %>% 
  mutate(Race = tolower(trimws(Race))) %>%
  mutate(Race = gsub('[[:punct:]]', '', Race)) %>%
  mutate(Race = sapply(Race, classify_race))

master_df <- master_df %>% 
  inner_join(race, by = "ID")


# Clean street name ----
street <- raw_df %>%
  select(ID, `Usual Place Of Residence`) %>%
  mutate(`Usual Place Of Residence` = tolower(`Usual Place Of Residence`)) %>% 
  mutate(`Usual Place Of Residence` = str_replace_all(`Usual Place Of Residence`, "\\b(?:str|st|rd|road|laan|lane)\\b", "street"),
         `Usual Place Of Residence` = str_replace_all(`Usual Place Of Residence`, "(\\w)(street)", "\\1 \\2")) %>%
  mutate(`Usual Place Of Residence` = gsub('[[:punct:]]', '', `Usual Place Of Residence`)) %>% 
  mutate(street_name = grepl("street| str|straat| st |road|laan|rd|lane", `Usual Place Of Residence`)) %>%
  mutate(`Usual Place Of Residence` = str_replace_all(`Usual Place Of Residence`, regex("dist|distrik|district", ignore_case = TRUE), "")) %>%
  mutate(`Usual Place Of Residence` = str_replace_all(`Usual Place Of Residence`, regex("upper|lower", ignore_case = TRUE), "")) %>% 
  mutate(`Usual Place Of Residence` = gsub("\\d", "", `Usual Place Of Residence`),
         `Usual Place Of Residence` = str_squish(`Usual Place Of Residence`))

master_df <- master_df %>% 
  inner_join(street, by = 'ID')

# Determine dominant race of areas
residence_race_count <- master_df %>%
  group_by(`Usual Place Of Residence`, Race) %>%
  summarize(Count = n()) %>%
  arrange(`Usual Place Of Residence`, Race)

# Clean literacy indicator: signed or marked ----

words <- lit %>%
  select(`Signed, Yes Or No?`) %>%
  unnest_tokens(word, `Signed, Yes Or No?`) %>%
  mutate(word = gsub('[[:digit:]]+', '', word)) %>%
  count(word, sort = T)

lit <- raw_df %>%
  select(ID, `Signed, Yes Or No?`)

# Assuming raw_df is your dataframe
lit <- lit %>%
  mutate(`Signed, Yes Or No?` = str_to_lower(`Signed, Yes Or No?`)) %>%
  mutate(`Signed, Yes Or No?` = case_when(
    str_detect(`Signed, Yes Or No?`, "yes|ja") ~ "1",
    str_detect(`Signed, Yes Or No?`, "mark|merk|mak|maek|m[a-z]*k|makr|
               maark|meerk|marked|merj|make|maek|x|makrk") ~ "0",
    TRUE ~ NA_character_
  ))

write_xlsx(lit, "/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/Masters-2023/Research Papers/Death Certificates/Working Data/lit.xlsx")

# Remove unnecessary columns ----
master_df <- master_df %>%
  select(-c(`Age`, `Day Of Death`, `Month Of Death`, `Year Of Death`, `Duration Last Illness`))

# Wipe the sweat off your brow
# Create a dummy data ----

# Create age group variable
master_df <- master_df %>%
  mutate(Age_Group = case_when(
    age_years >= 0 & age_years <= 4 ~ "0-4",
    age_years >= 5 & age_years <= 9 ~ "5-9",
    age_years >= 10 & age_years <= 14 ~ "10-14",
    age_years >= 15 & age_years <= 19 ~ "15-19",
    age_years >= 20 & age_years <= 24 ~ "20-24",
    age_years >= 25 & age_years <= 34 ~ "25-34",
    age_years >= 35 & age_years <= 49 ~ "35-49",
    age_years >= 50 & age_years <= 69 ~ "50-69",
    age_years >= 70 ~ "70+",
    TRUE ~ NA_character_
  ))

# Create dummy variables and standardize DOLI_days
working_df <- master_df %>%
  mutate(`Med Man Name` = ifelse(is.na(`Med Man Name`) | `Med Man Name` == "", 0, 1),
         Street_Name = ifelse(street_name, 1, 0),
         COD_Class_First = str_extract(cod_class, "^[^;]+")) %>%
  group_by(COD_Class_First) %>%
  mutate(DOLI_days_std = (DOLI_days - mean(DOLI_days, na.rm = TRUE)) / sd(DOLI_days, na.rm = TRUE)) %>%
  ungroup() %>%
  select(ID, Age_Group, Race, `Med Man Name`, Sex, COD_Class_First, 
         Occupation, Occupation_Father, Occupation_Mother, 
         Street_Name, DOLI_days_std) %>%
  mutate(across(c(Age_Group, Race, Sex, COD_Class_First, Occupation, Occupation_Father, Occupation_Mother), 
                ~factor(.x, levels = unique(.x), ordered = FALSE))) %>%
  tidyr::pivot_longer(cols = c(Age_Group, Race, Sex, COD_Class_First, Occupation, Occupation_Father, Occupation_Mother), 
                      names_to = "Variable", values_to = "Value") %>%
  mutate(dummy = 1) %>%
  tidyr::pivot_wider(names_from = c(Variable, Value), values_from = dummy, values_fill = 0)


# Some variables didn't clean completely
# Export working_df and check manually

# write_xlsx(working_df, "/Users/janhendrik/OneDrive - Stellenbosch University/Masters-2023/Research Papers/Death Certificates/Working Data/dummy.xlsx")
# write_xlsx(master_df, "/Users/janhendrik/OneDrive - Stellenbosch University/Masters-2023/Research Papers/Death Certificates/Working Data/clean.xlsx")

# For plotting, we would like all causes of death, to look at prevalence and not just the first listed cause of death:
# Expand cod_class into separate rows for each cause of death
master_df_expanded <- master_df %>%
  separate_rows(cod_class, sep = ";")

# Create dummy variables for each cause of death
# Function to create dummy variables for multiple causes of death
create_cod_dummies <- function(cod_str, unique_cods) {
  cod_list <- unlist(strsplit(cod_str, ";"))
  dummies <- as.integer(unique_cods %in% cod_list)
  names(dummies) <- unique_cods
  return(dummies)
}

# Get the unique cause of death classes
unique_cods <- unique(unlist(strsplit(cod$cod_class, ";")))

# Create dummy variables for each cause of death
cod_dummies <- t(sapply(cod$cod_class, create_cod_dummies, unique_cods = unique_cods))

# Create a new dataframe with the dummy variables
cod_with_dummies <- cbind(cod, cod_dummies)
write_xlsx(cod_with_dummies, "/Users/janhendrik/OneDrive - Stellenbosch University/Masters-2023/Research Papers/Death Certificates/Working Data/cod_dummies.xlsx")


