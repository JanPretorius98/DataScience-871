# Join with the 'world' dataframe
world <- left_join(world, df_city_grouped, by = c("region" = "name"))
world <- world %>%
filter(!is.na(mean_profile_views))
# Create the choropleth map
choropleth <- map_bg +
geom_polygon(data = world, aes(x = long, y = lat, fill = mean_profile_views, group = group), color = "#000123") +
scale_fill_gradient(name = 'Mean Profile Views',
low = "#8c2aef",
high = "#1beaa7",
na.value = "") +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"),
plot.margin = margin(0, 0, 0, 0))
print(choropleth)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "#000123") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views, size = mean_profile_views), alpha = 0.8) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
scale_size_continuous(guide = "none", range = c(1, 8)) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"),
plot.margin = margin(0, 0, 0, 0))
print(views)
# Group by country and calculate mean profile views
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE))
# Convert two-letter country codes to full country names
df_city_grouped <- left_join(df_city_grouped, eu_countries, by = c("country_code" = "code"))
# Join with the 'world' dataframe
world <- left_join(world, df_city_grouped, by = c("region" = "name"))
world <- world %>%
filter(!is.na(mean_profile_views))
# Create the choropleth map
choropleth <- map_bg +
geom_polygon(data = world, aes(x = long, y = lat, fill = mean_profile_views, group = group), color = "#000123") +
scale_fill_gradient(name = 'Mean Profile Views',
low = "#8c2aef",
high = "#1beaa7",
na.value = "") +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"),
plot.margin = margin(0, 0, 0, 0))
print(choropleth)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "#000123") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views, size = mean_profile_views), alpha = 0.8) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
scale_size_continuous(guide = "none", range = c(1, 8)) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
# Group by country and calculate mean profile views
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE))
# Convert two-letter country codes to full country names
df_city_grouped <- left_join(df_city_grouped, eu_countries, by = c("country_code" = "code"))
# Join with the 'world' dataframe
world <- left_join(world, df_city_grouped, by = c("region" = "name"))
world <- world %>%
filter(!is.na(mean_profile_views))
# Create the choropleth map
choropleth <- map_bg +
geom_polygon(data = world, aes(x = long, y = lat, fill = mean_profile_views, group = group), color = "#000123") +
scale_fill_gradient(name = 'Mean Profile Views',
low = "#8c2aef",
high = "#1beaa7",
na.value = "") +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(choropleth)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "#000123") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views, size = mean_profile_views), alpha = 0.8) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
scale_size_continuous(guide = "none", range = c(1, 8)) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
# Group by country and calculate mean profile views
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE))
# Convert two-letter country codes to full country names
df_city_grouped <- left_join(df_city_grouped, eu_countries, by = c("country_code" = "code"))
# Join with the 'world' dataframe
world <- left_join(world, df_city_grouped, by = c("region" = "name"))
world <- world %>%
filter(!is.na(mean_profile_views))
# Create the choropleth map
choropleth <- map_bg +
geom_polygon(data = world, aes(x = long, y = lat, fill = mean_profile_views, group = group), color = "#000123") +
scale_fill_gradient(name = 'Mean Profile Views',
low = "#8c2aef",
high = "#1beaa7",
na.value = "") +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(choropleth)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "#000123") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views, size = mean_profile_views), alpha = 0.8) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
scale_size_continuous(guide = "none", range = c(1, 8)) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
# Group by country and calculate mean profile views
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE))
# Convert two-letter country codes to full country names
df_city_grouped <- left_join(df_city_grouped, eu_countries, by = c("country_code" = "code"))
# Join with the 'world' dataframe
world <- left_join(world, df_city_grouped, by = c("region" = "name"))
world <- world %>%
filter(!is.na(mean_profile_views))
# Create the choropleth map
choropleth <- map_bg +
geom_polygon(data = world, aes(x = long, y = lat, fill = mean_profile_views, group = group), color = "#000123") +
scale_fill_gradient(name = 'Mean Profile Views',
low = "#8c2aef",
high = "#1beaa7",
na.value = "") +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(choropleth)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "#000123") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views, size = mean_profile_views), alpha = 0.8) +
scale_colour_gradient(
name = 'Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
scale_size_continuous(guide = "none", range = c(1, 8)) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
# Group by country and calculate mean profile views
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE))
# Convert two-letter country codes to full country names
df_city_grouped <- left_join(df_city_grouped, eu_countries, by = c("country_code" = "code"))
# Join with the 'world' dataframe
world <- left_join(world, df_city_grouped, by = c("region" = "name"))
world <- world %>%
filter(!is.na(mean_profile_views))
# Create the choropleth map
choropleth <- map_bg +
geom_polygon(data = world, aes(x = long, y = lat, fill = mean_profile_views, group = group), color = "#000123") +
scale_fill_gradient(name = 'Profile Views',
low = "#8c2aef",
high = "#1beaa7",
na.value = "") +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(choropleth)
gg <- df %>%
filter(counts_profileVisits < 100000 & counts_kisses < 6000) %>%
ggplot(aes(x = counts_profileVisits, y = counts_kisses)) +
geom_point(aes(fill = factor(has_emoji), size = counts_details), pch = 21, alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji")) +
scale_size(range = c(0.1, 4)) +
labs(x = "Profile Visits Count", y = "Number of Kisses", size = "Details Count", fill = "Contains Emoji") +
th + theme(legend.position = "right") +
scale_colour_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji"))
gg %>% plot_gg(width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
install.packages("rayshader")
install.packages("rayshader")
library(rayshader)
gg %>% plot_gg(width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
gg %>% plot_gg(width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30)
gg %>% plot_gg(width = 3.5, multicore = TRUE,
zoom = 0.85, phi = 35, theta = 30)
gg %>% %>%
gg %>%
plot_gg(theme = "minimal", width = 5, height = 5, scale = 50, background = "#000123")
gg %>%
plot_gg(width = 5, height = 5, scale = 50, background = "#000123")
df %>%
filter(counts_profileVisits < 100000 & counts_kisses < 6000) %>%
ggplot(aes(x = counts_profileVisits, y = counts_kisses)) +
geom_point(aes(fill = factor(has_emoji), size = counts_details), pch = 21, alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji")) +
scale_size(range = c(0.1, 4)) +
labs(x = "Profile Visits Count", y = "Number of Kisses", size = "Details Count", fill = "Contains Emoji") +
th + theme(legend.position = "right") +
geom_smooth(aes(colour = factor(has_emoji)), method = "loess", se = FALSE) +
scale_colour_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji"))
gg <- df %>%
filter(counts_profileVisits < 100000 & counts_kisses < 6000) %>%
ggplot(aes(x = counts_profileVisits, y = counts_kisses)) +
geom_point(aes(fill = factor(has_emoji), size = counts_details), pch = 21, alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji")) +
scale_size(range = c(0.1, 4)) +
labs(x = "Profile Visits Count", y = "Number of Kisses", size = "Details Count", fill = "Contains Emoji") +
theme(legend.position = "right")
gg %>%
rayshader::plot_gg(width = 5, height = 5, scale = 50, background = "#000123")
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
gg %>%
rayshader::plot_gg(width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
gg %>%
rayshader::plot_gg(width = 3.5, multicore = TRUE,
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
knitr::opts_chunk$set(echo = TRUE)
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE),
num_users = sum(num_users, na.rm = TRUE)) # Assuming num_users is your column name
# Load packages in use
pacman::p_load(dplyr, ggplot2, tidyverse, rsample, caret, glmnet, vip, pdp, stringr,
tidytext, emoji, stopwords, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, eurostat, rayshader)
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE),
num_users = sum(num_users, na.rm = TRUE)) # Assuming num_users is your column name
View(df_city)
View(df)
# Count the number of users per country in the 'df' dataframe
df_country_users <- df %>%
group_by(country) %>%
summarise(num_users = n())
# Convert two-letter country codes to full country names in df_country_users
df_country_users <- left_join(df_country_users, eu_countries, by = c("country" = "code"))
# Summarise mean_profile_views per country in df_city dataframe
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE))
# Join df_city_grouped with df_country_users to add the number of users per country
df_city_grouped <- left_join(df_city_grouped, df_country_users, by = c("country_code" = "country"))
# Create the lollipop chart with number of users and colored by mean profile views
ggplot(df_city_grouped, aes(x = reorder(name, -num_users), y = num_users)) +
geom_segment(aes(xend = name, yend = 0), color = "skyblue") +
geom_point(aes(color = mean_profile_views), size = 3, alpha = 0.6) +
coord_flip() +
scale_color_gradient(name = 'Mean Profile Views', low = "#8c2aef", high = "#1beaa7") +
theme_light() +
xlab("") +
ylab("Number of Users") +
ggtitle("Number of Dating App
# Count the number of users per country in the 'df' dataframe
df_country_users <- df %>%
group_by(country) %>%
summarise(num_users = n())
# Convert two-letter country codes to full country names in df_country_users
df_country_users <- left_join(df_country_users, eu_countries, by = c("country" = "code"))
# Summarise mean_profile_views per country in df_city dataframe
df_city_grouped <- df_city %>%
mutate(country_code = substr(address, nchar(address) - 1, nchar(address))) %>%
group_by(country_code) %>%
summarise(mean_profile_views = mean(mean_profile_views, na.rm = TRUE))
# Join df_city_grouped with df_country_users to add the number of users per country
df_city_grouped <- left_join(df_city_grouped, df_country_users, by = c("country_code" = "country"))
# Create the lollipop chart with number of users and colored by mean profile views
ggplot(df_city_grouped, aes(x = reorder(name, -num_users), y = num_users)) +
geom_segment(aes(xend = name, yend = 0), color = "skyblue") +
geom_point(aes(color = mean_profile_views), size = 3, alpha = 0.6) +
coord_flip() +
scale_color_gradient(name = 'Mean Profile Views', low = "#8c2aef", high = "#1beaa7") +
theme_light() +
xlab("") +
ylab("Number of Users") +
ggtitle("Number of Dating App Users per Country") +
theme(plot.title = element_text(hjust = 0.5))
# Create the lollipop chart with number of users and colored by mean profile views
ggplot(df_city_grouped, aes(x = reorder(name, -num_users), y = num_users)) +
geom_segment(aes(xend = name, yend = 0), color = "skyblue") +
geom_point(aes(color = mean_profile_views), size = 3, alpha = 0.6) +
coord_flip() +
scale_color_gradient(name = 'Mean Profile Views', low = "#8c2aef", high = "#1beaa7") +
theme_light() +
xlab("") +
ylab("Number of Users") + th
# Create the lollipop chart with number of users and colored by mean profile views
ggplot(df_city_grouped, aes(x = reorder(name, -num_users), y = num_users)) +
geom_segment(aes(xend = name, yend = 0), color = "skyblue") +
geom_point(aes(color = mean_profile_views), size = 3, alpha = 0.6) +
coord_flip() +
scale_color_gradient(name = 'Mean Profile Views', low = "#8c2aef", high = "#1beaa7") +
theme_light() +
xlab("") +
ylab("Number of Users") + th +
theme(legend.position = "right")
# Create the lollipop chart with number of users and colored by mean profile views
ggplot(df_city_grouped, aes(x = reorder(name, -num_users), y = num_users)) +
geom_segment(aes(xend = name, yend = 0), color = "skyblue") +
geom_point(aes(color = mean_profile_views), size = 3, alpha = 0.6) +
coord_flip() +
scale_color_gradient(name = 'Mean Profile Views', low = "#8c2aef", high = "#1beaa7") +
xlab("") +
ylab("Number of Users") + th +
theme(legend.position = "right")
# Create the lollipop chart with number of users and colored by mean profile views
ggplot(df_city_grouped, aes(x = reorder(name, -num_users), y = num_users)) +
geom_segment(aes(xend = name, yend = 0), color = "skyblue") +
geom_point(aes(color = mean_profile_views), size = 3, alpha = 0.6) +
coord_flip() +
scale_color_gradient(name = 'Mean Profile Views', low = "#8c2aef", high = "#1beaa7") +
xlab("") +
ylab("Number of Users") + th +
theme(legend.position = "right",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())
# Create the lollipop chart with number of users and colored by mean profile views
ggplot(df_city_grouped, aes(x = reorder(name, -num_users), y = num_users)) +
geom_segment(aes(xend = name, yend = 0), color = "skyblue") +
geom_point(aes(color = mean_profile_views), size = 3, alpha = 0.6) +
coord_flip() +
scale_color_gradient(name = 'Mean Profile Views', low = "#8c2aef", high = "#1beaa7") +
xlab("") +
ylab("Number of Users") + th +
theme(legend.position = "right",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df %>%
filter(counts_profileVisits < 100000 & counts_kisses < 6000) %>%
ggplot(aes(x = counts_profileVisits, y = counts_kisses)) +
geom_point(aes(fill = factor(has_emoji), size = counts_details), pch = 21, alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji")) +
scale_size(range = c(0.1, 4)) +
labs(x = "Profile Visits Count", y = "Number of Kisses", size = "Details Count", fill = "Contains Emoji") +
th + theme(legend.position = "right") +
geom_smooth(aes(colour = factor(has_emoji)), method = "loess", se = FALSE) +
scale_colour_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji"))
