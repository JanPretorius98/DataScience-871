strip.background = element_blank(),
strip.text = element_text(face = "bold", size = 14),
axis.text.x = element_blank()
)
df %>%
filter(counts_profileVisits < 10000, !is.na(night_owl), !is.na(has_social)) %>%
gather("group", "value", has_emoji, contains_popular_word, night_owl, has_social) %>%
ggplot(aes(x = counts_profileVisits, fill = factor(value))) +
geom_density(alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"),
name = "",
labels = c("No", "Yes")) +
facet_wrap(~ group, labeller = as_labeller(c(has_emoji = "Emoji",
contains_popular_word = "Popular Words",
night_owl = "Night Owl",
has_social = "Social Media"))) +
labs(x = "Profile Visits Count", y = "Density", fill = "Category") +
th +
theme(
strip.background = element_blank(),
strip.text = element_text(face = "bold", size = 14)
)
df_city <- read_excel("geocode_latlon.xlsx")
world <- map_data("world") %>% filter(region == "UK")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3)
world <- map_data("world") %>% filter(region == "Europe")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3)
world <- map_data("world") %>% filter(region == "EU")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3)
world <- map_data("world")
# Load packages in use
pacman::p_load(dplyr, ggplot2, tidyverse, rsample, caret, glmnet, vip, pdp, stringr,
tidytext, emoji, stopwords, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, countrycode)
# Get a list of European countries
european_countries <- unique(countrycode_data$country.name[countrycode_data$region == "Europe"])
help("countrycode-package")
help("countryname")
# Install and load the countrycode package
install.packages("countrycode")
install.packages("countrycode")
library(countrycode)
# Get a list of European countries
european_countries <- unique(euro_countries$country.name)
# Install and load the countrycode package
install.packages("eurostat")
library(eurostat)
# Get the list of European countries
european_countries <- eurostat_geos(concept = "NUTS0", output_class = "DF")$geo
ea_countries
world <- map_data("world") %>% filter(region == ea_countries$name)
world <- map_data("world") %>%
filter(region %in% ea_countries)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3)
world <- map_data("world") %>%
filter(region %in% ea_countries$name)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3)
world <- map_data("world") %>%
filter(region %in% eu_countries$name)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3)
ea_countries
df_city <- df_city %>%
filter(substr(address, 1, 2) %in% ea_countries$code)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- read_excel("geocode_latlon.xlsx")
world <- map_data("world") %>%
filter(region %in% ea_countries$name)
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% ea_countries$code)
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + ylim(50, 59) + coord_map() + theme(legend.position="none")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
df_city <- read_excel("geocode_latlon.xlsx")
world <- map_data("world") %>%
filter(region %in% eu_countries$name)
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code)
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code,
lon > -90,
lat > 0)
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code,
lon > -90 & lon < 100,
lat > 0)
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
df_city <- read_excel("geocode_latlon.xlsx")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | region == "UK",
lon > -90 & lon < 100,
lat > 0)
df_city <- read_excel("geocode_latlon.xlsx")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | nchar(address) == "UK",
lon > -90 & lon < 100,
lat > 0)
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") + th +
theme_void() + coord_map() + theme(legend.position="none")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") +
theme_void() + coord_map() + theme(legend.position="none")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") + th +
theme_void() + coord_map() + theme(legend.position="none")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") + th + coord_map() + theme(legend.position="none")
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, size=mean_profile_views, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") + th + coord_map() + theme(legend.position="none")
df %>%
filter(counts_profileVisits < 100000) %>%
ggplot(aes(y = counts_profileVisits, x = counts_pictures)) +
geom_point(aes(fill = factor(has_emoji), size = counts_details), pch = 21, alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji")) +
scale_size(range = c(0.2, 3)) +
labs(y = "Profile Visits Count", x = "Pictures Count", size = "Details Count", fill = "Contains Emoji") +
th + theme(legend.position = "right") +
geom_smooth(aes(colour = factor(has_emoji)), method = "loess", se = FALSE) +
scale_colour_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji"))
df %>%
filter(counts_profileVisits < 100000 & counts_kisses < 6000) %>%
ggplot(aes(x = counts_profileVisits, y = counts_kisses)) +
geom_point(aes(fill = factor(has_emoji), size = counts_details), pch = 21, alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji")) +
scale_size(range = c(0.1, 4)) +
labs(x = "Profile Visits Count", y = "Number of Kisses", size = "Details Count", fill = "Contains Emoji") +
th + theme(legend.position = "right") +
geom_smooth(aes(colour = factor(has_emoji)), method = "loess", se = FALSE) +
scale_colour_manual(values = c("#1beaa7", "#8c2aef"), name = "Has Emoji", labels = c("No Emoji", "Contains Emoji"))
# df_city <- df %>%
#   select(c(city, country, counts_profileVisits)) %>%
#   mutate(address = paste0(city, ", ", country)) %>%
#   group_by(address) %>%
#   summarise(mean_profile_views = mean(counts_profileVisits, na.rm = TRUE))
#
# df_city <- df_city %>%
#   mutate(geocode_data = map(address, ~geocode(.x, source = "google", output = "latlon")),
#          lon = map_dbl(geocode_data, "lon"),
#          lat = map_dbl(geocode_data, "lat"))
#
# write_csv(df_city, "geocode_latlon.csv")
df %>%
filter(counts_profileVisits < 10000, !is.na(night_owl), !is.na(has_social)) %>%
gather("group", "value", has_emoji, contains_popular_word, night_owl, has_social) %>%
ggplot(aes(x = counts_profileVisits, fill = factor(value))) +
geom_density(alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"),
name = "",
labels = c("No", "Yes")) +
facet_wrap(~ group, labeller = as_labeller(c(has_emoji = "Emoji",
contains_popular_word = "Popular Words",
night_owl = "Night Owl",
has_social = "Social Media"))) +
labs(x = "Profile Visits Count", y = "Density", fill = "Category") +
th +
theme(
strip.background = element_blank(),
strip.text = element_text(face = "bold", size = 14)
)
# Load packages in use
pacman::p_load(dplyr, ggplot2, tidyverse, rsample, caret, glmnet, vip, pdp, stringr,
tidytext, emoji, stopwords, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, eurostat, rayshader)
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") + th + coord_map() + theme(legend.position="none")
map <-  ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") + th + coord_map() + theme(legend.position="none")
# Load packages in use
pacman::p_load(dplyr, ggplot2, tidyverse, rsample, caret, glmnet, vip, pdp, stringr,
tidytext, emoji, stopwords, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, eurostat, rayshader)
knitr::opts_chunk$set(echo = TRUE)
# goal: "Threefold: (1) Transformation and cleaning of data. (2) Exploratory Data Analysis of Dating Site Data. (3) Machine Learning modelling."
# Clear environment
rm(list = ls())
options(scipen = 999)
# Load packages in use
pacman::p_load(dplyr, ggplot2, tidyverse, rsample, caret, glmnet, vip, pdp, stringr,
tidytext, emoji, stopwords, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, eurostat, rayshader)
# Define plot themes and palettes
palette <- c("#1beaa7", "#00d9d3", "#C93A86", "#00a5ff", "#007bff", "#8c2aef")
th <- theme(legend.position = "bottom",
panel.background = element_blank(),
plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_line(color="white", size = 0.1),
panel.grid.minor = element_line(color="white", size = 0.1),
axis.title.x=element_text(colour="white", size = 12,
family = "arial", vjust=-2,hjust=0.5, face = "bold"),
axis.title.y=element_text(colour="white", size = 12,
family = "arial",vjust = 3,hjust=0.5, face = "bold"),
axis.text.y=element_text(colour ="white", size = 10,
family = "arial"),
axis.text.x=element_text(colour="white", size = 10,
family = "arial"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
plot.title = element_text(colour="white", size = 16,
family = "arial",hjust=0.5, face = "bold"),
plot.subtitle = element_text(colour="white", size = 14,
family = "arial"),
plot.caption = element_text(colour="white", size = 10,
family = "arial"),
legend.text = element_text(colour="white", size = 12,
family = "arial"),
legend.title = element_text(colour="white", size = 12,
family = "arial", hjust=3, face = "bold"),
axis.ticks = element_blank(),
strip.text = element_text(colour="white", size = 12,
family = "arial", vjust=1,hjust=0.5),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"))
# Import data
path <- "/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/Masters-2023/Modules/Data Science/DataScience-871-repo/JHPretorius-Project/Candidate Data Sets/Dating/"
file <- "lovoo_v3_users_api-results.csv"
df <- read_csv(paste0(path, file))
# Define dummy variable that detects presence of emojis
df <- df %>%
mutate(has_emoji = ifelse(emoji_detect(whazzup), 1, 0))
# Get the most used words in profile
# First, create a table of words with the corresponding counts_profileVisits
words_visits <- df %>%
unnest_tokens(word, whazzup) %>%
mutate(word = str_remove_all(word, "[[:digit:]]+")) %>%
select(word, counts_profileVisits)
# Then calculate the mean counts_profileVisits for each word and its count
words <- words_visits %>%
group_by(word) %>%
summarise(mean_profileVisits = mean(counts_profileVisits, na.rm = TRUE),
word_count = n(),
.groups = "drop")
# Create word popularity index and determine popular words
# Important to remove stop words from list of popular words, as they are frequently used, but carry no significant meaning
words <- words %>%
mutate(popularity_index = 0.8 * word_count + 0.2 * mean_profileVisits) %>%
filter(popularity_index > 200 & word_count > 10,
word != "",
!is.na(word),
!is.na(mean_profileVisits),
!is.na(word_count),
!is.na(popularity_index)) %>%
filter(!word %in% stopwords::stopwords("de")) %>%
filter(!word %in% stopwords::stopwords("en")) %>%
filter(!word %in% stopwords::stopwords("fr"))
# Create a single pattern string that matches any word in words$word
words_pattern <- paste(words$word, collapse = "|")
# Add the new variable to df
df <- df %>%
mutate(contains_popular_word = ifelse(str_detect(whazzup, words_pattern), 1, 0)) %>%
mutate(
contains_popular_word = replace_na(contains_popular_word, 0),
has_emoji = replace_na(has_emoji, 0)
)
words <- words %>%
arrange(desc(popularity_index)) %>%
select(c(word, popularity_index))
# Create Word Cloud
wordcloud2(words, size=1.6, color='random-light', backgroundColor = "#000123")
social <- "instagram|insta|facebook|fb|snapchat|snap"
df <- df %>%
mutate(whazzup = tolower(whazzup),
has_social = as.numeric(str_detect(whazzup, social))) %>%
replace_na(list(has_social = 0))
df <- df %>%
mutate(night_owl = ifelse(hour(hms(substr(lastOnlineDate, 12, 19))) > 18 |
hour(hms(substr(lastOnlineDate, 12, 19))) < 6, 1, 0))
df %>%
filter(counts_profileVisits < 10000, !is.na(night_owl), !is.na(has_social)) %>%
mutate(has_emoji = factor(has_emoji, labels = c("No", "Yes")),
contains_popular_word = factor(contains_popular_word, labels = c("No", "Yes")),
night_owl = factor(night_owl, labels = c("No", "Yes")),
has_social = factor(has_social, labels = c("No", "Yes"))) %>%
pivot_longer(cols = c(has_emoji, contains_popular_word, night_owl, has_social), names_to = "Factor", values_to = "Value") %>%
mutate(Factor = recode(Factor,
has_emoji = "Emoji",
contains_popular_word = "Popular Words",
night_owl = "Night Owl",
has_social = "Social Media")) %>%
ggplot(aes(x = Value, y = counts_profileVisits, fill = Value)) +
geom_boxplot(colour = "white", alpha = 0.8) +
scale_fill_manual(values = c("#1beaa7", "#8c2aef")) +
facet_wrap(~ Factor, scales = "free", strip.position = "top") +
labs(x = "", y = "Profile Visits Count", fill = "") +
th +
theme(
strip.background = element_blank(),
strip.text = element_text(face = "bold", size = 14),
axis.text.x = element_blank()
)
df %>%
filter(counts_profileVisits < 10000, !is.na(night_owl), !is.na(has_social)) %>%
gather("group", "value", has_emoji, contains_popular_word, night_owl, has_social) %>%
ggplot(aes(x = counts_profileVisits, fill = factor(value))) +
geom_density(alpha = 0.8, colour = "white") +
scale_fill_manual(values = c("#1beaa7", "#8c2aef"),
name = "",
labels = c("No", "Yes")) +
facet_wrap(~ group, labeller = as_labeller(c(has_emoji = "Emoji",
contains_popular_word = "Popular Words",
night_owl = "Night Owl",
has_social = "Social Media"))) +
labs(x = "Profile Visits Count", y = "Density", fill = "Category") +
th +
theme(
strip.background = element_blank(),
strip.text = element_text(face = "bold", size = 14)
)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK")
map <-  ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="white", alpha=0.3) +
geom_point(data = df_city, aes(x=lon, y=lat, color=mean_profile_views), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log") + th + coord_map() + theme(legend.position="none")
plot_gg(map, multicore)
library(rayshader)
install.packages("rayshader")
library(rayshader)
