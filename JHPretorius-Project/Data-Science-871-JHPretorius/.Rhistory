high = "#B23A48"
)
print(views)
# Convert to a 3D plot using plotly
p3d <- plot_ly(df_city, x = ~lon, y = ~lat, z = ~mean_profile_views, color = ~mean_profile_views, type = "scatter3d", mode = "markers")
p3d
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#FCB9B2",
high = "#B23A48"
) +
th
print(views)
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#FCB9B2",
high = "#B23A48"
) +
theme(legend.position = "bottom",
panel.background = element_rect(fill = "#000123", color = "#000123"),
plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123", color = "#000123"),
axis.text = element_blank()
)
print(views)
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#FCB9B2",
high = "#B23A48"
) +
theme(legend.position = "bottom",
panel.background = element_rect(fill = "#000123", color = "#000123"),
plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123", color = "#000123"),
legend.text = element_text(color = "white")
axis.text = element_blank()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#FCB9B2",
high = "#B23A48"
) +
theme(legend.position = "bottom",
panel.background = element_rect(fill = "#000123", color = "#000123"),
plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123", color = "#000123"),
legend.text = element_text(color = "white"),
axis.text = element_blank()
)
print(views)
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#FCB9B2",
high = "#B23A48"
) +
theme(legend.position = "right",
panel.background = element_rect(fill = "#000123", color = "#000123"),
plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123", color = "#000123"),
legend.text = element_text(color = "white"),
axis.text = element_blank()
)
print(views)
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#FCB9B2",
high = "#B23A48"
) +
theme(legend.position = "right",
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123", color = "#000123"),
legend.text = element_text(color = "white"),
axis.text = element_blank()
)
print(views)
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#FCB9B2",
high = "#B23A48"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
t
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_viridis(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views)) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
# Convert to a 3D plot using plotly
p3d <- plot_ly(df_city, x = ~lon, y = ~lat, z = ~mean_profile_views, color = ~mean_profile_views, type = "scatter3d", mode = "markers")
p3d
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
print(views)
mtplot = ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, color = cyl)) +
scale_color_continuous(limits = c(0, 8))
par(mfrow = c(1, 2))
plot_gg(mtplot, width = 3.5, raytrace = FALSE, preview = TRUE)
plot_gg(mtplot, width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
plot_gg(mtplot, width = 3.5, raytrace = FALSE, preview = TRUE)
plot_gg(mtplot, width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
mtplot = ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, color = cyl)) +
scale_color_continuous(limits = c(0, 8))
plot_gg(mtplot, width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
plot_gg(views, width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
library(rayshader)
# First, let's create an interpolated matrix based on your scatterplot
# For this, we will use the `akima` package for interpolation
library(akima)
install.packages("akima")
library(akima)
# Define a grid for interpolation
interp_grid <- with(df_city, interp(x = lon, y = lat, z = mean_profile_views))
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
library(rayshader)
# First, let's create an interpolated matrix based on your scatterplot
# For this, we will use the `akima` package for interpolation
library(akima)
# Define a grid for interpolation
interp_grid <- with(df_city, interp(x = lon, y = lat, z = mean_profile_views))
# Define a grid for interpolation
df_city_unique <- df_city[!duplicated(df_city[c('lon', 'lat')]), ]
interp_grid <- with(df_city, interp(x = lon, y = lat, z = mean_profile_views))
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
library(rayshader)
# First, let's create an interpolated matrix based on your scatterplot
# For this, we will use the `akima` package for interpolation
library(akima)
# Remove duplicates based on 'lon' and 'lat'
df_city_unique <- df_city[!duplicated(df_city[c('lon', 'lat')]), ]
# Define a grid for interpolation
interp_grid <- with(df_city_unique, akima::interp(x = lon, y = lat, z = mean_profile_views, duplicate = "mean"))
# Generate 3D height map based on interpolated grid
height_map <- matrix(interp_grid$z, nrow = length(interp_grid$y), ncol = length(interp_grid$x))
# Now we can plot the surface using `rayshader`
height_map %>%
rayshader::sphere_shade(texture = "bw") %>%
rayshader::add_shadow(rayshader::ray_shade(height_map, zscale = 3), 0.5) %>%
rayshader::add_shadow(rayshader::ambient_shade(height_map), 0.5) %>%
rayshader::plot_3d(height_map, zscale = 3, fov = 60, theta = 135, phi = 45, windowsize = c(800, 600), zoom = 0.8)
# Render the plot
rayshader::render_snapshot()
# Remove duplicates based on 'lon' and 'lat'
df_city_unique <- df_city[!duplicated(df_city[c('lon', 'lat')]), ]
# Define a grid for interpolation
interp_grid <- with(df_city_unique, akima::interp(x = lon, y = lat, z = mean_profile_views, duplicate = "mean"))
# Generate 3D height map based on interpolated grid
height_map <- matrix(interp_grid$z, nrow = length(interp_grid$y), ncol = length(interp_grid$x))
# Now we can plot the surface using `rayshader`
height_map %>%
rayshader::sphere_shade(texture = "bw") %>%
rayshader::add_shadow(rayshader::ray_shade(height_map, zscale = 3), 0.5) %>%
rayshader::add_shadow(rayshader::ambient_shade(height_map), 0.5) %>%
rayshader::plot_3d(height_map, zscale = 3, fov = 60, theta = 135, phi = 45, windowsize = c(800, 600), zoom = 0.8)
help("plot_gg")
plot_gg(views,
width = 8,
height = 8,
height_aes = 'color',
)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
# convert ggplot to plot_gg
ggplotly_3d <- plot_gg(views, width = 5, height = 5, scale = 300, multicore = TRUE)
df_city <- read_excel("geocode_latlon.xlsx")
df_city <- df_city %>%
mutate(mean_profile_views = as.numeric(mean_profile_views),
lat = as.numeric(lat),
lon = as.numeric(lon)) %>%
filter(!is.na(lon),
mean_profile_views > 0,
lon > -90 & lon < 100,
lat > 0)
# Filter by countries after data cleaning and transformation
df_city <- df_city %>%
filter(substr(address, nchar(address) - 1, nchar(address)) %in% eu_countries$code | address == "UK")
world <- map_data("world") %>%
filter(region %in% eu_countries$name | region == "UK" | region == "Czech Republic" | region == "Switzerland")
# Creating ggplot with map
map_bg <- ggplot(data = world) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "white", colour = "black") +
coord_map() +
theme_void()
# Adding scatterplot on the map
views <- map_bg +
geom_point(data = df_city, aes(x = lon, y = lat, color = mean_profile_views), size = 1) +
scale_colour_gradient(
name = 'Mean Profile Views',
limits = range(df_city$mean_profile_views),
low = "#8c2aef",
high = "#1beaa7"
) +
theme(plot.background = element_rect(fill = "#000123", color = "#000123"),
panel.background = element_rect(fill = "#000123", color = "#000123"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
legend.key = element_rect(fill = "#000123", color = "#000123"),
legend.background = element_rect(fill = "#000123"),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"))
# convert ggplot to plot_gg
ggplotly_3d <- plot_gg(views, width = 5, height = 5, scale = 300, multicore = TRUE)
